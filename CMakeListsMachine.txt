# =========================================================================
# Detect machine environments
# =========================================================================
CMAKE_HOST_SYSTEM_INFORMATION(RESULT CMAKE_FQDN_HOST QUERY FQDN)
MARK_AS_ADVANCED(FORCE CMAKE_FQDN_HOST)
MARK_AS_ADVANCED(FORCE CMAKE_HOSTNAME)
SITE_NAME(CMAKE_HOSTNAME)
SET(FORCE_VDM_ANALYTICAL OFF)

# =========================================================================
# CMake generator settings
# =========================================================================
set(USED_CMAKE_GENERATOR "${CMAKE_GENERATOR}" CACHE STRING "Expose CMAKE_GENERATOR (cannot be changed here)" FORCE)
MESSAGE(STATUS "Using cmake generator: ${CMAKE_GENERATOR}")
IF("${CMAKE_GENERATOR}" MATCHES "Ninja")
  # CMake introduced the CMAKE_COLOR_DIAGNOSTICS flag with 3.24.0, https://gitlab.kitware.com/cmake/cmake/-/merge_requests/6990
  IF(NOT(${CMAKE_VERSION} VERSION_LESS "3.24.0"))
    SET(CMAKE_COLOR_DIAGNOSTICS ON CACHE INTERNAL "Flag if CMake should attempt to color output")
  ELSE()
    SET(NINJA_COLOR_DIAGNOSTICS "-fdiagnostics-color=always" CACHE INTERNAL "Flag if Ninja should attempt to color output")
  ENDIF()
ENDIF()

# =========================================================================
# Some clusters requires setting the compilers by hand and invoking
# ENABLE_LANGUAGE afterwards, which is required for
# CMAKE_Fortran_COMPILER_ID that is used below
# > This block must be called before ENABLE_LANGUAGE
# =========================================================================
# HLRS HAWK / SuperMUC
IF ("${CMAKE_HOSTNAME}" MATCHES "login")
  SET(CMAKE_C_COMPILER       mpicc)
  SET(CMAKE_CXX_COMPILER     mpicxx)
  SET(CMAKE_Fortran_COMPILER mpif90) # mpif08 wrapper seems to have issue
# IAG Prandtl
ELSEIF("${CMAKE_HOSTNAME}" MATCHES "^prandtl")
  SET(CMAKE_C_COMPILER       gcc)
  SET(CMAKE_CXX_COMPILER     c++)
  SET(CMAKE_Fortran_COMPILER gfortran)
# IAG Grafik01/Grafik02
ELSEIF ("${CMAKE_HOSTNAME}" MATCHES "^grafik0")
  SET(CMAKE_C_COMPILER       gcc)
  SET(CMAKE_CXX_COMPILER     c++)
  SET(CMAKE_Fortran_COMPILER gfortran)
ELSEIF ("${CMAKE_HOSTNAME}" MATCHES "^ilahead1")
  SET(CMAKE_C_COMPILER       mpicc)
  SET(CMAKE_CXX_COMPILER     mpicxx)
  SET(CMAKE_Fortran_COMPILER mpif90) # mpif08 wrapper seems to have issue
ELSEIF ("${CMAKE_HOSTNAME}" MATCHES "^xenon")
  SET(CMAKE_C_COMPILER       mpicc)
  SET(CMAKE_CXX_COMPILER     mpicxx)
  SET(CMAKE_Fortran_COMPILER mpif90) # mpif08 wrapper seems to have issue
ENDIF()

# =========================================================================
# Score-P instrumentation infrastructure
# > This option must be called before ENABLE_LANGUAGE, thus is only available
# > through -DMACHINE_USE_SCOREP=ON
# =========================================================================
IF (MACHINE_USE_SCOREP)
  FIND_PROGRAM(SCOREP_C_COMPILER scorep-${CMAKE_C_COMPILER})
  MARK_AS_ADVANCED(FORCE SCOREP_C_COMPILER )
  IF (SCOREP_C_COMPILER MATCHES "NOTFOUND")
    MESSAGE (FATAL_ERROR "Score-P not available in PATH. Did you load the module?")
  ENDIF()

  # Set default build type to profile
  IF (NOT CMAKE_BUILD_TYPE)
    SET (CMAKE_BUILD_TYPE Profile CACHE STRING "Choose the type of build, options are: Debug Release Profile Sanitize." FORCE)
  ENDIF (NOT CMAKE_BUILD_TYPE)
  IF (CMAKE_BUILD_TYPE MATCHES "Release")
    MESSAGE (WARNING "Score-P requires debug compile flags which are not available with BUILD_TYPE='Release'")
  ENDIF()

  SET(CMAKE_C_COMPILER       "scorep-${CMAKE_C_COMPILER}")
  SET(CMAKE_CXX_COMPILER     "scorep-${CMAKE_CXX_COMPILER}")
  SET(CMAKE_Fortran_COMPILER "scorep-${CMAKE_Fortran_COMPILER}")
ENDIF()

# =========================================================================
# After settings specific compilers, enable named languages for cmake
# =========================================================================
ENABLE_LANGUAGE(Fortran C CXX)
INCLUDE(GNUInstallDirs)

# =========================================================================
# Set machine-specific definitions and settings
# =========================================================================
# Revert to default via -DPICLAS_INSTRUCTION= once this value has been changed via, e.g., -DPICLAS_INSTRUCTION=-mtune=generic
IF(NOT DEFINED PICLAS_INSTRUCTION)
  SET(PICLAS_INSTRUCTION "")
ENDIF()

# HLRS HAWK / SuperMUC
IF("${PICLAS_INSTRUCTION}" STREQUAL "")
  IF ("${CMAKE_HOSTNAME}" MATCHES "login")
    MARK_AS_ADVANCED(FORCE C_PATH CXX_PATH Fortran_PATH)

    # HAWK and SuperMUC name their login nodes identically, so use the Fully Qualified Domain Name (FQDN) to identify
    CMAKE_HOST_SYSTEM_INFORMATION(RESULT FQDN QUERY FQDN)
    MARK_AS_ADVANCED(FORCE FQDN)
    # HLRS HAWK
    IF (FQDN MATCHES "hawk.hww.hlrs.de")
      MESSAGE(STATUS "Compiling on Hawk")
      # Overwrite compiler target architecture
      IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU" OR CMAKE_Fortran_COMPILER_ID MATCHES "Flang")
        SET(PICLAS_INSTRUCTION "-march=znver2")
      ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
        SET(PICLAS_INSTRUCTION "-xCORE-AVX2")
      ENDIF()
      # Use AMD Optimized Lapack/BLAS
      # SET(BLA_VENDOR "FLAME")
    # SuperMUC
    ELSEIF (FQDN MATCHES "sng.lrz.de")
      MESSAGE(STATUS "Compiling on SuperMUC")
      # Overwrite compiler target architecture
      IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU" OR CMAKE_Fortran_COMPILER_ID MATCHES "Flang")
        SET(PICLAS_INSTRUCTION "-march=skylake-avx512")
      ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
        SET(PICLAS_INSTRUCTION "-xSKYLAKE-AVX512")
        # Explicitely enable usage of AVX512 registers
        SET (CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -qopt-zmm-usage=high")
      ENDIF()
    ENDIF()
    # Set LUSTRE definition to account for filesystem and MPI implementation
    ADD_DEFINITIONS(-DLUSTRE)

  # IAG Prandtl
  ELSEIF("${CMAKE_HOSTNAME}" MATCHES "^prandtl")
    MESSAGE(STATUS "Compiling on Prandtl")
    MARK_AS_ADVANCED(FORCE C_PATH CXX_PATH Fortran_PATH)
    SET(PICLAS_INSTRUCTION "-march=native")
    # Set LUSTRE definition to account for filesystem
    ADD_DEFINITIONS(-DLUSTRE)

  # IAG Grafik01/Grafik02
  ELSEIF ("${CMAKE_HOSTNAME}" MATCHES "^grafik0")
    MESSAGE(STATUS "Compiling on ${CMAKE_HOSTNAME}")
    MARK_AS_ADVANCED(FORCE C_PATH CXX_PATH Fortran_PATH)
    SET(PICLAS_INSTRUCTION "-march=native")

  ELSEIF ("${CMAKE_HOSTNAME}" MATCHES "^ilahead1")
    MESSAGE(STATUS "Compiling on ILA cluster")
    MARK_AS_ADVANCED(FORCE C_PATH CXX_PATH Fortran_PATH)
    # Overwrite compiler target architecture
    IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU" OR CMAKE_Fortran_COMPILER_ID MATCHES "Flang")
      SET(PICLAS_INSTRUCTION "-march=core-avx2")
    ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
      SET(PICLAS_INSTRUCTION "-xCORE-AVX2")
    ENDIF()
    # Work around MPI-IO issue 4446 on machines mounting storage via NFS
    ADD_DEFINITIONS(-DNFS)

  ELSEIF ("${CMAKE_HOSTNAME}" MATCHES "^xenon")
    MESSAGE(STATUS "Compiling on ILA student cluster")
    MARK_AS_ADVANCED(FORCE C_PATH CXX_PATH Fortran_PATH)
    SET(PICLAS_INSTRUCTION "-march=native")
    # Work around MPI-IO issue 4446 on machines mountng storage via NFS
    ADD_DEFINITIONS(-DNFS)

  ELSE()
    MESSAGE(STATUS "Compiling on a generic machine")
    # Set compiler target architecture
    IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU" OR CMAKE_Fortran_COMPILER_ID MATCHES "Flang" )
      SET(PICLAS_INSTRUCTION "-march=native")
      #SET(PICLAS_INSTRUCTION "-mtune=generic")
    ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
      SET(PICLAS_INSTRUCTION "-xHost")
    ENDIF()
  ENDIF()
ENDIF()

MESSAGE(STATUS "Compiling Nitro/Release/Profile with [${CMAKE_Fortran_COMPILER_ID}] (v${CMAKE_Fortran_COMPILER_VERSION}) fortran compiler using PICLAS_INSTRUCTION [${PICLAS_INSTRUCTION}] instructions.")

# =========================================================================
# CHECK SUPPORT FOR VARIOUS FORTRAN (2003,2008) FEATURES
# =========================================================================
INCLUDE(CheckFortranSourceCompiles)
CHECK_FORTRAN_SOURCE_COMPILES(
"MODULE F03MOD
IMPLICIT NONE
PRIVATE
CONTAINS
! Check for MOVE_ALLOC feature
SUBROUTINE F03_MOVE_ALLOC()
REAL,ALLOCATABLE::a(:,:),b(:,:)
ALLOCATE(a(3,3))
CALL MOVE_ALLOC(a,b)
END SUBROUTINE F03_MOVE_ALLOC
END MODULE F03MOD

PROGRAM F03PROG
END"
Fortran2003Check
SRC_EXT F90)

IF(NOT Fortran2003Check)
  MESSAGE(FATAL_ERROR "Failed to compile basic Fortran2003 programm! Please ensure your compiler is up-to-date!")
ENDIF()

# =========================================================================
# COMPILER FLAGS
# =========================================================================

# FFLAGS depend on the compiler
GET_FILENAME_COMPONENT (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

# GNU Compiler Collection (GCC)
IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
  # set Flags (disable lto type warnings due to false positives with MATMUL, which is a known bug)
  IF (NOT DEFINED C_FLAGS_INITIALIZED )
    SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
    SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -fdefault-real-8 -fdefault-double-8 -fbackslash -ffree-line-length-0 -finit-real=snan -finit-integer=snan -Wno-lto-type-mismatch -lstdc++ -DGNU")
    IF(PICLAS_EXTRAE)
      SET (CMAKE_Fortran_FLAGS       "${CMAKE_Fortran_FLAGS} -finstrument-functions")
    ENDIF(PICLAS_EXTRAE)
  ENDIF()
  SET (CMAKE_Fortran_FLAGS_NITRO     "${CMAKE_Fortran_FLAGS}  -Ofast ${PICLAS_INSTRUCTION}")
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS}     -O3 ${PICLAS_INSTRUCTION} -fstack-arrays")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -pg -O3 ${PICLAS_INSTRUCTION} -fstack-arrays")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -g  -Og -ggdb3 -ffpe-trap=invalid -fbounds-check -fbacktrace  -Wall")
  SET (CMAKE_Fortran_FLAGS_SANITIZE  "${CMAKE_Fortran_FLAGS} -g  -Og -ggdb3 -ffpe-trap=invalid,zero,overflow,denorm -fbounds-check -fbacktrace -Wall -fsanitize=address,undefined,leak -fno-omit-frame-pointer -Wc-binding-type -Wuninitialized -pedantic")
  # Compile flags depend on the generator
  IF(NOT "${CMAKE_GENERATOR}" MATCHES "Ninja")
    # add flags only for compiling not linking!
    SET (PICLAS_COMPILE_FLAGS "-xf95-cpp-input -fPIC")
  ELSE()
    SET (PICLAS_COMPILE_FLAGS "${NINJA_COLOR_DIAGNOSTICS} -fPIC")
  ENDIF()

# AMD Optimized LLVM/CLANG
ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Flang")
  # set Flags
  IF (NOT DEFINED C_FLAGS_INITIALIZED )
    SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
    SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -fdefault-real-8 -std=f2008 -lstdc++ -DFLANG")
  ENDIF()
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS}     -O3 ${PICLAS_INSTRUCTION} -finline-functions ")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -pg -O3 ${PICLAS_INSTRUCTION} -finline-functions ")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -g  -O0 -ggdb3 -ffpe-trap=invalid -fbounds-check -finit-real=snan -fbacktrace  -Wall")
  # Compile flags depend on the generator
  IF(NOT "${CMAKE_GENERATOR}" MATCHES "Ninja")
    # add flags only for compiling not linking!
    SET (PICLAS_COMPILE_FLAGS "-xf95-cpp-input -fPIC")
  ELSE()
    SET (PICLAS_COMPILE_FLAGS "${NINJA_COLOR_DIAGNOSTICS} -fPIC")
  ENDIF()

# Intel Compiler
ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
  # set Flags
  IF (NOT DEFINED C_FLAGS_INITIALIZED )
    SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
    SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -r8 -i4 -traceback -warn all -shared-intel -lstdc++ -DINTEL")
  ENDIF()
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS}    -O3 ${PICLAS_INSTRUCTION} -qopt-report0 -qopt-report-phase=vec -no-prec-div")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -p -O3 ${PICLAS_INSTRUCTION} -qopt-report0 -qopt-report-phase=vec -no-prec-div")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -g -O0 -fpe0 -traceback -check all,noarg_temp_created,noformat,nooutput_conversion,pointer,uninit -init=snan -init=arrays")
  # Compile flags depend on the generator
  IF(NOT "${CMAKE_GENERATOR}" MATCHES "Ninja")
    # add flags only for compiling not linking!
    SET (PICLAS_COMPILE_FLAGS "-fPIC -fpp -allow nofpp_comments -assume bscc")
  ELSE()
    SET (PICLAS_COMPILE_FLAGS "${NINJA_COLOR_DIAGNOSTICS} -allow nofpp_comments -assume bscc")
  ENDIF()

# Cray Compiler
ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Cray")
  # set Flags
  IF (NOT DEFINED C_FLAGS_INITIALIZED )
    SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
    SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -f free -s real64 -em -lstdc++ -DCRAY")
  ENDIF()
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS} -O2 -hfp3 -p . -rm")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -O2 -hfp3 -h profile_generate -p . -rm")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -O0 -eD -rm")
  # add flags only for compiling not linking!
  SET (PICLAS_COMPILE_FLAGS "${NINJA_COLOR_DIAGNOSTICS} -F")
ELSE()
  MESSAGE(SEND_ERROR "Unknown compiler")
ENDIF()

# =========================================================================
# Profile-Guided Optimization (PGO)
# =========================================================================
CMAKE_DEPENDENT_OPTION(USE_PGO "Enable profile-guided optimization (Only GNU Compiler supported)" OFF
                               "PICLAS_PERFORMANCE" OFF)
IF (USE_PGO)
  IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
    SET(CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE} -fprofile-use")
    SET(CMAKE_Fortran_FLAGS_PROFILE "${CMAKE_Fortran_FLAGS_PROFILE} -fprofile-generate")
  ELSE()
    MESSAGE( SEND_ERROR "Profile-guided optimization (PGO) currently only supported for GNU compiler. Either set USE_PGO=OFF or use the GNU compiler." )
  ENDIF()
ENDIF()

# Save the current compiler flags to the cache every time cmake configures the project.
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS)
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS_RELEASE)
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS_PROFILE)
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS_DEBUG)
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS_SANITIZE)
SET(CMAKE_Fortran_FLAGS            "${CMAKE_Fortran_FLAGS}"          CACHE STRING "Default compiler flags" FORCE)
SET(CMAKE_Fortran_FLAGS_RELEASE    "${CMAKE_Fortran_FLAGS_RELEASE}"  CACHE STRING "Release compiler flags" FORCE)
SET(CMAKE_Fortran_FLAGS_PROFILE    "${CMAKE_Fortran_FLAGS_PROFILE}"  CACHE STRING "Profile compiler flags" FORCE)
SET(CMAKE_Fortran_FLAGS_DEBUG      "${CMAKE_Fortran_FLAGS_DEBUG}"    CACHE STRING "Debug compiler flags"   FORCE)
SET(CMAKE_Fortran_FLAGS_SANITIZE   "${CMAKE_Fortran_FLAGS_SANITIZE}" CACHE STRING "Sanitize compiler flags"  FORCE)
