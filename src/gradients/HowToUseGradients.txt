How to use this gradient folder for the calculation of the gradients:
--------------------------------------------------------------------------------------------------------
#0 Add ./src/gradients/*.f90 to the list of files to compile in CMakeLists.txt
--------------------------------------------------------------------------------------------------------
#1 ADD the following to your Initialization (i.e. in the *method*_init.f90):

        USE MOD_Gradient_Init          

and at a location of your choice:

        CALL InitGradients(Grad_DIM)

Add CALL DefineParameterGradients in init/define_parameters_init.f90

--------------------------------------------------------------------------------------------------------
#2 For obtaining the gradients within a subroutine, add:

	USE MOD_Gradient            ,ONLY: GetGradients
	
and 

	CALL GetGradients(Variable_for_which_you_want_the_gradient)
	
--------------------------------------------------------------------------------------------------------
#3 The results are stored in the variable Gradient_elem(1:3,1:Grad_DIM,1:PP_nELems). 
For accessing them, simply add

	USE MOD_Gradient_Vars             ,ONLY: Gradient_elem
--------------------------------------------------------------------------------------------------------
#4 Add CALL FinalizeGradients() in your finalize routine	
--------------------------------------------------------------------------------------------------------
LIMITING GRADIENTS:

If the gradients should be limited, this can be done with the subroutine GradLimiter in gradients.f90

--------------------------------------------------------------------------------------------------------
COPYING ELEMENT DATA TO SIDE:

For the calculation of the gradients, there is a new routine: ProlongToFace_ElemCopy within gradients.f90
which copies the element data to the respective sides

--------------------------------------------------------------------------------------------------------
GRADIENTS AT BOUNDARIES:

As this varies from case to case, create some GetBoundaryGrad routine

Within the GetBoundaryGrad routine for PP_TimeDiscMethod==510, the value outside the boundary is assumed 
to be zero.

Within the GetBoundaryGrad routine for PP_TimeDiscMethod==600, something wild is happening. Please ask
Felix.

