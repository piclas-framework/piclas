# Settings
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Load modules on new boltzplatz reggie
before_script:
  - ulimit -s unlimited
  - python3 -V || true
  - python2 -V || true
  - if [ -n "${DO_CORE_SPLIT}" ]; then
      echo " PICLAS_SPLIT_TYPE=OMPI_COMM_TYPE_CORE. Splitting shared memory domains on processor-level!";
      export PICLAS_SPLIT_TYPE=OMPI_COMM_TYPE_CORE;
    else
      if [ -n "${DO_NODE_SPLIT}" ]; then
        echo " PICLAS_SPLIT_TYPE=PICLAS_COMM_TYPE_NODE. Splitting shared memory domains on sub-node-level with 2 cores per node!";
        export PICLAS_SPLIT_TYPE=PICLAS_COMM_TYPE_NODE;
      else
        echo "Splitting shared memory domains on node-level! Set variable DO_CORE_SPLIT=T to force core-level OR DO_NODE_SPLIT=T to force sub-node-level shared memory splitting for all regression tests.";
      fi
    fi
  - if [ -n "${DO_NINJA}" ]; then
      echo " Setting CMAKE_GENERATOR=Ninja to use ninja generator";
      export CMAKE_GENERATOR=Ninja;
      export GENERATOR=ninja;
      export NCORES=0;
    else
      echo " Using default generator [Unix Makefiles] and [make] for compiling.";
      export GENERATOR=make;
      export NCORES=;
    fi
  - if [ -n "${DO_MPICH}" ]; then
      module purge;
      module load   cmake/3.26.4    gcc/13.2.0  mpich/4.1.2/gcc/13.2.0        hdf5/1.14.0/gcc/13.2.0/mpich/4.1.2        hopr/master/gcc/13.2.0/mpich/4.1.2/hdf5/1.14.0        petsc/3.19.3/gcc/13.2.0/mpich/4.1.2;
    fi
  - if [ -n "${DO_MPICH_DEBUG}" ]; then
      module purge;
      module load   cmake/3.26.4    gcc/13.2.0  mpich-debug/4.1.2/gcc/13.2.0  hdf5/1.14.0/gcc/13.2.0/mpich-debug/4.1.2  hopr/master/gcc/13.2.0/mpich-debug/4.1.2/hdf5/1.14.0  petsc/3.19.3/gcc/13.2.0/mpich-debug/4.1.2;
    fi
  - module list
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stages
# ----------------------------------------------------------------------------------------------------------------------------------------------------
stages:
  - build
  - reggie_checkin
  - reggie_feature_checkin
  - reggie_DSMC_nightly
#  - reggie_bgk_nightly
  - reggie_tools_nightly
  - reggie_nightly
  - reggie_nightly_build_all
  - reggie_weekly
  - documentation
  - deploy

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Templates ("hidden jobs")
# 1. Set the tags and artifacts properties (same for every job)
# 2. Extend parameters for the testing stages in general: allow failure and pull the cached reggie
# 3. Extend parameters for specific testing stages: maxwell, poisson, poisson + PETSc, DSMC
# 4. Extend parameters of each testing stage to the check-in, nightly and weekly testing
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Default parameters for the build and testing stage
.default_build_param: &default_build_param
  tags: [withmodules-concurrent]
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Default parameters for the testing stage only (reusing the previous template)
.default_param: &default_param
  <<: *default_build_param
  allow_failure: true

.reggie_cache: &reggie_cache
  key: "reggie"
  paths: [reggie]
  policy: pull

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Defaults for the standard maxwell tests (utilizing "extends" to merge the other "artifacts" options with the specific path)
.defaults: &defaults
  extends: .default_param
  needs: [build]
  artifacts:
    paths: [build]
  cache:
    - *reggie_cache
    - key: "${CI_COMMIT_REF_SLUG}"
      paths: [build]
      policy: pull

.defaults_checkin: &defaults_checkin
  <<: *defaults
  rules:
    - if: '$DO_CHECKIN'
    - if: '$CI_PIPELINE_SOURCE == "push"'

.defaults_nightly: &defaults_nightly
  <<: *defaults
  rules:
    - if: '$DO_NIGHTLY'

.defaults_weekly: &defaults_weekly
  <<: *defaults
  rules:
    - if: '$DO_WEEKLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Defaults for other maxwell tests with PICLAS_DEBUG_MEMORY=ON
.defaults_maxwell: &defaults_maxwell
  extends: .default_param
  needs: [build_maxwell]
  artifacts:
    paths: [build_maxwell]
  cache:
    - *reggie_cache
    - key: "${CI_COMMIT_REF_SLUG}-MAX"
      paths: [build_maxwell]
      policy: pull
  rules:
    - if: '$DO_CHECKIN'
    - if: '$CI_PIPELINE_SOURCE == "push"'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Defaults for poisson tests
.defaults_poisson: &defaults_poisson
  extends: .default_param
  needs: [build_poisson]
  artifacts:
    paths:
      - build_poisson_release
      - build_poisson_debug
  cache:
    - *reggie_cache
    - key: "${CI_COMMIT_REF_SLUG}-POI"
      paths:
        - build_poisson_release
        - build_poisson_debug
      policy: pull

.defaults_poisson_checkin: &defaults_poisson_checkin
  <<: *defaults_poisson
  rules:
    - if: '$DO_CHECKIN'
    - if: '$CI_PIPELINE_SOURCE == "push"'

.defaults_poisson_nightly: &defaults_poisson_nightly
  <<: *defaults_poisson
  rules:
    - if: '$DO_NIGHTLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Defaults for poisson + PETSC tests
.defaults_poisson_petsc: &defaults_poisson_petsc
  extends: .default_param
  needs: [build_poisson_petsc]
  artifacts:
    paths:
      - build_poisson_petsc_release
      - build_poisson_petsc_debug
  cache:
    - *reggie_cache
    - key: "${CI_COMMIT_REF_SLUG}-POI-PETSC"
      paths:
        - build_poisson_petsc_release
        - build_poisson_petsc_debug
      policy: pull

.defaults_poisson_petsc_checkin: &defaults_poisson_petsc_checkin
  <<: *defaults_poisson_petsc
  rules:
    - if: '$DO_CHECKIN'
    - if: '$CI_PIPELINE_SOURCE == "push"'

.defaults_poisson_petsc_nightly: &defaults_poisson_petsc_nightly
  <<: *defaults_poisson_petsc
  rules:
    - if: '$DO_NIGHTLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Defaults for DSMC tests
.defaults_DSMC: &defaults_DSMC
  extends: .default_param
  needs: [build_DSMC]
  artifacts:
    paths:
      - build_DSMC_release
      - build_DSMC_debug
      - build_DSMC_N1
  cache:
    - *reggie_cache
    - key: "${CI_COMMIT_REF_SLUG}-DSMC"
      paths:
        - build_DSMC_release
        - build_DSMC_debug
        - build_DSMC_N1
      policy: pull

.defaults_DSMC_checkin: &defaults_DSMC_checkin
  <<: *defaults_DSMC
  rules:
    - if: '$DO_CHECKIN'
    - if: '$CI_PIPELINE_SOURCE == "push"'

.defaults_DSMC_nightly: &defaults_DSMC_nightly
  <<: *defaults_DSMC
  rules:
    - if: '$DO_NIGHTLY'

.defaults_DSMC_weekly: &defaults_DSMC_weekly
  <<: *defaults_DSMC
  rules:
    - if: '$DO_WEEKLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "build": Build on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------

reggie_download:
  extends: .default_build_param
  artifacts:
    paths: [reggie]
  cache:
    key: "reggie"
    paths: [reggie]
    policy: push
  stage: build
  script:
    - git clone git@piclas.boltzplatz.eu:reggie2.0/reggie2.0.git reggie
    - if [ -f "reggie/.git/refs/heads/master" ]; then cat reggie/.git/refs/heads/master ; fi

build:
  extends: .default_build_param
  needs: [reggie_download]
  artifacts:
    paths: [build]
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths: [build]
    policy: push
  stage: build
  script:
    - mkdir -p build ; cd build
    #- cmake .. -DLIBS_BUILD_HDF5=OFF -DPICLAS_BUILD_POSTI=ON -DPOSTI_BUILD_SUPERB=ON -DPICLAS_READIN_CONSTANTS=ON ; $GENERATOR -j all
    - cmake -GNinja .. -DLIBS_BUILD_HDF5=OFF -DPICLAS_BUILD_POSTI=ON -DPOSTI_BUILD_SUPERB=ON -DPICLAS_READIN_CONSTANTS=ON ; ninja -j0 all

build_maxwell:
  extends: .default_build_param
  needs: [reggie_download]
  artifacts:
    paths: [build_maxwell]
  cache:
    key: "${CI_COMMIT_REF_SLUG}-MAX"
    paths: [build_maxwell]
    policy: push
  stage: build
  script:
    - mkdir -p build_maxwell ; cd build_maxwell
    - cmake .. -DPICLAS_DEBUG_MEMORY=ON -DPICLAS_PARTICLES=OFF -DLIBS_BUILD_HDF5=OFF -DPICLAS_READIN_CONSTANTS=ON ; $GENERATOR -j $NCORES all

build_poisson:
  extends: .default_build_param
  needs: [reggie_download]
  artifacts:
    paths:
      - build_poisson_release
      - build_poisson_debug
  cache:
    key: "${CI_COMMIT_REF_SLUG}-POI"
    paths:
      - build_poisson_release
      - build_poisson_debug
    policy: push
  stage: build
  script:
    - mkdir -p build_poisson_release ; cd build_poisson_release
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DPICLAS_EQNSYSNAME=poisson -DPICLAS_CODE_ANALYZE=ON -DPICLAS_TIMEDISCMETHOD=RK3 -DLIBS_BUILD_HDF5=OFF ; $GENERATOR -j $NCORES all
    - cd ..
    - mkdir -p build_poisson_debug ; cd build_poisson_debug
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DPICLAS_EQNSYSNAME=poisson -DPICLAS_CODE_ANALYZE=ON -DPICLAS_TIMEDISCMETHOD=RK3 -DLIBS_BUILD_HDF5=OFF ; $GENERATOR -j $NCORES all

build_poisson_petsc:
  extends: .default_build_param
  needs: [reggie_download]
  artifacts:
    paths:
      - build_poisson_petsc_release
      - build_poisson_petsc_debug
  cache:
    key: "${CI_COMMIT_REF_SLUG}-POI-PETSC"
    paths:
      - build_poisson_petsc_release
      - build_poisson_petsc_debug
    policy: push
  stage: build
  script:
    - mkdir -p build_poisson_petsc_release ; cd build_poisson_petsc_release
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DPICLAS_EQNSYSNAME=poisson -DPICLAS_PETSC=ON -DPICLAS_CODE_ANALYZE=ON -DPICLAS_TIMEDISCMETHOD=RK3 -DLIBS_BUILD_HDF5=OFF ; $GENERATOR -j $NCORES all
    - cd ..
    - mkdir -p build_poisson_petsc_debug ; cd build_poisson_petsc_debug
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DPICLAS_EQNSYSNAME=poisson -DPICLAS_PETSC=ON -DPICLAS_CODE_ANALYZE=ON -DPICLAS_TIMEDISCMETHOD=RK3 -DLIBS_BUILD_HDF5=OFF ; $GENERATOR -j $NCORES all

build_DSMC:
  extends: .default_build_param
  needs: [reggie_download]
  artifacts:
    paths:
      - build_DSMC_release
      - build_DSMC_debug
      - build_DSMC_N1
  cache:
    key: "${CI_COMMIT_REF_SLUG}-DSMC"
    paths:
      - build_DSMC_release
      - build_DSMC_debug
      - build_DSMC_N1
    policy: push
  stage: build
  script:
    - mkdir -p build_DSMC_release ; cd build_DSMC_release
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DPICLAS_TIMEDISCMETHOD=DSMC -DLIBS_BUILD_HDF5=OFF ; $GENERATOR -j $NCORES all
    - cd ..
    - mkdir -p build_DSMC_debug ; cd build_DSMC_debug
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DPICLAS_TIMEDISCMETHOD=DSMC -DLIBS_BUILD_HDF5=OFF ; $GENERATOR -j $NCORES all
    - cd ..
    - mkdir -p build_DSMC_N1 ; cd build_DSMC_N1
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DPICLAS_TIMEDISCMETHOD=DSMC -DLIBS_BUILD_HDF5=OFF -DPICLAS_POLYNOMIAL_DEGREE=1 ; $GENERATOR -j $NCORES all

build_hopr:
  extends: .default_build_param
  artifacts:
    paths: [hopr]
  stage: build
  script:
    - git clone https://github.com/hopr-framework/hopr.git hopr;
    - cd hopr ; mkdir -p build ; cd build;
    - echo `pwd`
    - cmake .. -DLIBS_BUILD_HDF5=OFF
    - echo $GENERATOR
    - echo $NCORES
    - $GENERATOR -j $NCORES all
    - ls bin/hopr
    #- $GENERATOR -j $NCORES all &> output.txt;
    #- tail -n 20 output.txt;
    #- rm output.txt;
  rules:
    - if: '$DO_WEEKLY'

build_hopr_in_piclas:
  tags: [withmodules-concurrent]
  needs: [reggie_download]
  cache:
    <<: *reggie_cache
  stage: build
  script:
    - mkdir -p build_hopr_lib ; cd build_hopr_lib
    - python ../reggie/reggie.py ../regressioncheck/WEK_HOPR
  rules:
    - if: '$DO_WEEKLY'
    - if: '$DO_CORE_SPLIT'
      when: never
    - if: '$DO_NODE_SPLIT'
      when: never

build_no_git:
  tags: [withmodules-concurrent]
  stage: build
  script:
    - echo " Installing branch $CI_COMMIT_REF_NAME without git"
    - git clone --depth=1 --branch=$CI_COMMIT_REF_NAME git@piclas.boltzplatz.eu:piclas/piclas.git piclas-no-git
    - rm -rf piclas-no-git/.git* ; cd piclas-no-git ; ls -la
    - mkdir build_ ; cd build_ ;
    - cmake .. -DLIBS_BUILD_HDF5=OFF
    - $GENERATOR -j $NCORES all
  rules:
    - if: '$DO_WEEKLY'

build_no_git_libs:
  tags: [withmodules-concurrent]
  stage: build
  script:
    - echo " Installing branch $CI_COMMIT_REF_NAME without git but with external libs"
    - git clone --depth=1 --branch=$CI_COMMIT_REF_NAME git@piclas.boltzplatz.eu:piclas/piclas.git piclas-no-git-but-libs
    - rm -rf piclas-no-git-but-libs/.git* ; cd piclas-no-git-but-libs ; ls -la
    - mkdir build_ ; cd build_
    - cmake .. -DLIBS_BUILD_HDF5=ON -DLIBS_BUILD_MATH_LIB=ON -DLIBS_BUILD_MATH_LIB_VENDOR=OpenBLAS
    - echo " Compiling with -DLIBS_BUILD_HDF5=ON -DLIBS_BUILD_MATH_LIB=ON -DLIBS_BUILD_MATH_LIB_VENDOR=OpenBLAS ..."
    - $GENERATOR -j $NCORES all &> output.txt
    - tail -n 20 output.txt
    - rm output.txt
    - ls bin/piclas
  rules:
    - if: '$DO_WEEKLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_checkin": Run most simple reggie with previous builds on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
run_basic:
  <<: *defaults_checkin
  stage: reggie_checkin
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/run_basic/maxwell -e ./bin/piclas

maxwell:
  <<: *defaults_maxwell
  stage: reggie_checkin
  script:
    - cd build_maxwell ; python ../reggie/reggie.py ../regressioncheck/CHE_maxwell/maxwell -e ./bin/piclas

poisson_release:
  <<: *defaults_poisson_checkin
  stage: reggie_checkin
  script:
    - cd build_poisson_release ; python ../reggie/reggie.py ../regressioncheck/CHE_poisson -e ./bin/piclas

poisson_debug:
  <<: *defaults_poisson_checkin
  stage: reggie_checkin
  script:
    - cd build_poisson_debug ; python ../reggie/reggie.py ../regressioncheck/CHE_poisson -e ./bin/piclas

poisson_petsc_release:
  <<: *defaults_poisson_petsc_checkin
  stage: reggie_checkin
  script:
    - cd build_poisson_petsc_release ; python ../reggie/reggie.py ../regressioncheck/CHE_poisson -e ./bin/piclas

poisson_petsc_debug:
  <<: *defaults_poisson_petsc_checkin
  stage: reggie_checkin
  script:
    - cd build_poisson_petsc_debug ; python ../reggie/reggie.py ../regressioncheck/CHE_poisson -e ./bin/piclas


# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_feature_checkin": Run most simple reggie features with previous builds on check-in (must be very fast)
#                               - feature_PIC_gyrotron_variable_Bz: 1 cell layer gyrotron emission with variable B(z) field
#                               - feature_PIC_single_particle_PML : 4^3 cart box with a particle and 1 cell layer PMLs for all directions
# ----------------------------------------------------------------------------------------------------------------------------------------------------
CHE_PIC_maxwell_RK4:
  <<: *defaults_checkin
  stage: reggie_feature_checkin
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/CHE_PIC_maxwell_RK4 -e ./bin/piclas

      # Commented out 07/12/2020 - to be fixed (this reggie fails due to bug in implicit particle tracking)
      #CHE_PIC_maxwell_implicitBC:
      #  <<: *defaults_checkin
      #  stage: reggie_feature_checkin
      #  script:
      #    - cd build ; python ../reggie/reggie.py ../regressioncheck/CHE_PIC_maxwell_implicitBC

CHE_DSMC:
  <<: *defaults_DSMC_checkin
  stage: reggie_feature_checkin
  script:
    - cd build_DSMC_release ; python ../reggie/reggie.py ../regressioncheck/CHE_DSMC -e ./bin/piclas
    - cd ..
    - cd build_DSMC_N1 ; python ../reggie/reggie.py ../regressioncheck/CHE_DSMC -e ./bin/piclas

CHE_BGK:
  <<: *defaults_checkin
  stage: reggie_feature_checkin
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/CHE_BGK

CHE_FPFlow:
  <<: *defaults_checkin
  stage: reggie_feature_checkin
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/CHE_FPFlow

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_DSMC_nightly": Build and run chemistry examples on nightly (check reaction rates in RESERVOIR simulation)
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_Reservoir:
  <<: *defaults_DSMC_nightly
  stage: reggie_DSMC_nightly
  script:
    - cd build_DSMC_release/ ; python ../reggie/reggie.py ../regressioncheck/NIG_Reservoir -e bin/piclas

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_DSMC_nightly": Build and run tracking examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_Tracking:
  <<: *defaults_DSMC_nightly
  stage: reggie_DSMC_nightly
  script:
    - cd build_DSMC_debug/ ; python ../reggie/reggie.py ../regressioncheck/NIG_tracking_DSMC -e ./bin/piclas

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_DSMC_nightly": Build and run DSMC examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_DSMC:
  <<: *defaults_DSMC_nightly
  stage: reggie_DSMC_nightly
  script:
    - cd build_DSMC_release/ ; python ../reggie/reggie.py ../regressioncheck/NIG_DSMC -e bin/piclas
    - cd ..
    - cd build_DSMC_debug/ ; python ../reggie/reggie.py ../regressioncheck/NIG_DSMC -e bin/piclas

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_tools_nightly": Build and run superB and piclas2vtk examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_SuperB_piclas:
  <<: *defaults_nightly
  needs: [build]
  stage: reggie_tools_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_SuperB -e ./bin/piclas

NIG_SuperB_standalone:
  <<: *defaults_nightly
  needs: [build]
  stage: reggie_tools_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_SuperB -e ./bin/superB

NIG_piclas2vtk:
  <<: *defaults_nightly
  stage: reggie_tools_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_piclas2vtk

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_bgk_nightly": Build and run BGK-Flow examples on nightly (CURRENTLY NO NIGHTLY TEST FOR BGK)
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# gnu_NIG_BGK-Flow:
#   <<: *defaults_nightly
#   stage: reggie_bgk_nightly
#   tags: [withmodules-concurrent]
#   script:
#     - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_BGK-Flow

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly": Build and run
#                         - feature_PIC_single_particle/ : basic PIC test with a single particle in a cart box
#                         - test particle emission for gyrotron setup with fixed electric current of 44 A
#                         - test record points for TWT setup and compare with h5diff
#                         - h-p-convtests
#                         - feature_maxwell_dipole_cylinder_PML/ : curved cylinder geometry with PML on axis and dipole in center for testing RP output
#                         - feature_maxwell_dipole_dielectric/ : curved sphere with dielectric region in the center and dipole at near the edge
#                         - feature_maxwell_ExactFlux_PML/ : inner BC that emits a planar wave in z-direction (PMLs are placed at
#                                                            the entry and exit of the cuboid domain)
#                      examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_dielectric:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/NIG_dielectric

NIG_PIC_maxwell_RK4:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_PIC_maxwell_RK4/

NIG_convtest_maxwell:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/NIG_convtest_maxwell

NIG_convtest_t_maxwell:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/NIG_convtest_t_maxwell

NIG_convtest_t_poisson:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/NIG_convtest_t_poisson

NIG_convtest_poisson:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/NIG_convtest_poisson

NIG_PIC_poisson_RK3:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_PIC_poisson_RK3/

NIG_PIC_poisson_Boris-Leapfrog:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_PIC_poisson_Boris-Leapfrog/

NIG_PIC_poisson_Leapfrog:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_PIC_poisson_Leapfrog/

      # NIG_PIC_poisson_Leapfrog_not_working:
      #   <<: *defaults_nightly
      #   stage: reggie_nightly
      #   script:
      #     - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_PIC_poisson_Leapfrog_not_working/

      # Crank-Nicolson (2nd order implicit) time integration
      # NIG_PIC_poisson_powerdensity:
      #   <<: *defaults_nightly
      #   stage: reggie_nightly
      #   script:
      #     - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_PIC_poisson_powerdensity/

NIG_poisson:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_poisson/

NIG_poisson_PETSC:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_poisson_PETSC/

NIG_maxwell_RK4:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_maxwell_RK4/

NIG_PIC_poisson_plasma_wave:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_PIC_poisson_plasma_wave/

NIG_maxwell_dipole_dielectric:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_maxwell_dipole_dielectric/

      # Commented out 07/12/2020 - to be fixed:
      # this reggie has two examples:
      #  - imexfluid (fails): differnces as compared with the ref. files because particles are lost
      #  - surface_flux (works): no problems detected
      #NIG_PIC_poisson_implicit04:
      #  <<: *defaults_nightly
      #  stage: reggie_nightly
      #  script:
      #    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_PIC_poisson_implicit04/

NIG_LoadBalance:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_LoadBalance/

NIG_code_analyze:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_code_analyze/

NIG_IntKind8:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_IntKind8/

NIG_PIC_Deposition:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_PIC_Deposition/

# Add surf model (SEE) 13% probabilty test case here
#feature_SurfaceModel:
#  <<: *defaults_nightly
#  stage: reggie_nightly
#  script:
#    - cd build ; python ../reggie/reggie.py ../regressioncheck/NIG_SurfaceModel/

NIG_Photoionization_release:
  <<: *defaults_poisson_nightly
  stage: reggie_nightly
  script:
    - cd build_poisson_release;  python ../reggie/reggie.py ../regressioncheck/NIG_Photoionization -e ./bin/piclas

NIG_Photoionization_debug:
  <<: *defaults_poisson_nightly
  stage: reggie_nightly
  script:
    - cd build_poisson_debug;  python ../reggie/reggie.py ../regressioncheck/NIG_Photoionization -e ./bin/piclas

NIG_Photoionization_petsc_release:
  <<: *defaults_poisson_petsc_nightly
  stage: reggie_nightly
  script:
    - cd build_poisson_petsc_release;  python ../reggie/reggie.py ../regressioncheck/NIG_Photoionization -e ./bin/piclas

NIG_Photoionization_petsc_debug:
  <<: *defaults_poisson_petsc_nightly
  stage: reggie_nightly
  script:
    - cd build_poisson_petsc_debug;  python ../reggie/reggie.py ../regressioncheck/NIG_Photoionization -e ./bin/piclas

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly_build_all": Build and run
#                                    - build all specified compile options in "run_basic" with BUILD_HDF5=ON
#                                    - sanitizer for maxwell/poisson (CMAKE_BUILD_TYPE=Sanitize,Profile)
#                                    - math tools Lapack and OpenBlas with LIBS_BUILD_MATH_LIB = ON and LIBS_BUILD_MATH_LIB_VENDOR = LAPACK,OpenBLAS
# ----------------------------------------------------------------------------------------------------------------------------------------------------
build_all:
  <<: *defaults_nightly
  stage: reggie_nightly_build_all
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/run_basic

build_sanitize:
  <<: *defaults_nightly
  stage: reggie_nightly_build_all
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/NIG_sanitize

build_math_tools:
  <<: *defaults_nightly
  stage: reggie_nightly_build_all
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/NIG_math_libs

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_weekly": Build and run examples once a week
#                         - feature_PIC_maxwell_plasma_wave/ : test a plasma-wave with different time-integration and maxwell's equations
# ----------------------------------------------------------------------------------------------------------------------------------------------------
WEK_PIC_maxwell:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/WEK_PIC_maxwell

WEK_PIC_poisson:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/WEK_PIC_poisson

WEK_DSMC:
  <<: *defaults_DSMC_weekly
  stage: reggie_weekly
  script:
    - cd build_DSMC_release ;  python ../reggie/reggie.py ../regressioncheck/WEK_DSMC -e bin/piclas

WEK_Reservoir:
  <<: *defaults_DSMC_weekly
  stage: reggie_weekly
  script:
    - cd build_DSMC_release ;  python ../reggie/reggie.py ../regressioncheck/WEK_Reservoir -e bin/piclas

WEK_FPFlow:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/WEK_FPFlow

WEK_BGKFlow:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build ;  python ../reggie/reggie.py ../regressioncheck/WEK_BGKFlow

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "documentation": Compile the userguide and developer guide
# ----------------------------------------------------------------------------------------------------------------------------------------------------
documentation:
  extends: .default_build_param
  stage: documentation
  script:
    - cd docs/documentation
    - python3 -m pip install --exists-action=w --no-cache-dir -r requirements.txt
    - python3 -m sphinx -T -E -b html -d _build/doctrees -D language=en . _build/html
    - ls -l _build/html
    - python3 -m sphinx -b latex -D language=en -d _build/doctrees . _build/latex
    - ls -l _build/latex
    - cd _build/latex
    - latexmk -r latexmkrc -pdf -f -dvi- -ps- -jobname=piclas -interaction=nonstopmode || true
    - ls -l
    - ls -l piclas.pdf
  artifacts:
    paths:
      - docs/documentation

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "github": Push the master branch to github
# ----------------------------------------------------------------------------------------------------------------------------------------------------
github:
  stage: deploy
  tags:
    - withmodules-concurrent
  rules:
    - if: '$DO_DEPLOY'
  script:
    - if [ -z "${DO_DEPLOY}" ]; then exit ; fi
    - rm -rf piclas_github || true ;
    - git clone -b master --single-branch git@piclas.boltzplatz.eu:piclas/piclas.git piclas_github ;
    - cd piclas_github ;
    - git remote add piclas-framework git@github.com:piclas-framework/piclas.git ;
    - git push --force --follow-tags piclas-framework master ;
